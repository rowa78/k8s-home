apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
    name: jenkins
    namespace: jenkins
spec:
    interval: 5m
    chart:
      spec:
        # renovate: 
        chart: jenkins
        version: 4.1.5
        sourceRef:
          kind: HelmRepository
          name: jenkins-charts
          namespace: flux-system
    values:
      controller:
        # Used for label app.kubernetes.io/component
        componentName: "jenkins-controller"
        image: "jenkins/jenkins"
        # tag: "2.332.3-jdk11"
        tagLabel: jdk11
        imagePullPolicy: "Always"
        imagePullSecretName:
        
        admin:
          existingSecret: "jenkins-admin-secret"
          userKey: jenkins-admin-user
          passwordKey: jenkins-admin-password
       

        # List of plugins to be install during Jenkins controller start
        installPlugins:
          - kubernetes:latest
          - workflow-aggregator:latest
          - git:latest
          - configuration-as-code:latest

        # Set to false to download the minimum required version of all dependencies.
        installLatestPlugins: true

        # Set to true to download latest dependencies of any plugin that is requested to have the latest version.
        installLatestSpecifiedPlugins: true

        # List of plugins to install in addition to those listed in controller.installPlugins
        additionalPlugins: []

        # Enable to initialize the Jenkins controller only once on initial installation.
        # Without this, whenever the controller gets restarted (Evicted, etc.) it will fetch plugin updates which has the potential to cause breakage.
        # Note that for this to work, `persistence.enabled` needs to be set to `true`
        initializeOnce: false

        # Enable to always override the installed plugins with the values of 'controller.installPlugins' on upgrade or redeployment.
        # overwritePlugins: true

        # Configures if plugins bundled with `controller.image` should be overwritten with the values of 'controller.installPlugins' on upgrade or redeployment.
        overwritePluginsFromImage: true

        nodeSelector: 
          kubernetes.io/arch: amd64

        ingress:
          enabled: true
          # Override for the default paths that map requests to the backend
          paths: []
          # - backend:
          #     serviceName: ssl-redirect
          #     servicePort: use-annotation
          # - backend:
          #     serviceName: >-
          #       {{ template "jenkins.fullname" . }}
          #     # Don't use string here, use only integer value!
          #     servicePort: 8080
          # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
          # For Kubernetes v1.19+, use 'networking.k8s.io/v1'
          apiVersion: "extensions/v1beta1"
          labels: {}
          annotations: 
              external-dns.alpha.kubernetes.io/hostname: jenkins.${SECRET_DOMAIN_2}
              external-dns.alpha.kubernetes.io/target: ipv4.${SECRET_DOMAIN_2}
              external-dns.alpha.kubernetes.io/ttl: "120"
              external-dns/is-public: "true"
              kubernetes.io/ingress.class: "nginx"
          # kubernetes.io/ingress.class: nginx
          # kubernetes.io/tls-acme: "true"
          # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
          # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
          # ingressClassName: nginx
          # Set this path to jenkinsUriPrefix above or use annotations to rewrite path
          # path: "/jenkins"
          # configures the hostname e.g. jenkins.example.com
          hostName: jenkins.${SECRET_DOMAIN_2}
          tls:
            - hosts:
              - jenkins.${SECRET_DOMAIN_2}
          # - secretName: jenkins.cluster.local
          #   hosts:
          #     - jenkins.cluster.local

