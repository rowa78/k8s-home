apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
    name: chartmuseum
    namespace: chartmuseum
spec:
    interval: 5m
    chart:
      spec:        
        chart: chartmuseum
        version: 3.3.0
        sourceRef:
          kind: HelmRepository
          name: chartmuseum
          namespace: flux-system
    values:      
      extraArgs: []
        # - --storage-timestamp-tolerance 1s
      replicaCount: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 0
      image:
        repository: ghcr.io/helm/chartmuseum
        tag: v0.14.0
        pullPolicy: IfNotPresent
      secret:
        labels: {}
      env:
        open:
          # storage backend, can be one of: local, alibaba, amazon, google, microsoft, oracle
          STORAGE: local          
          # show debug messages
          DEBUG: false
          # output structured logs as json
          LOG_JSON: true
          # disable Prometheus metrics
          DISABLE_METRICS: false
          # disable all routes prefixed with /api
          DISABLE_API: false
          # allow chart versions to be re-uploaded
          ALLOW_OVERWRITE: true
          # absolute url for .tgzs in index.yaml
          CHART_URL:
          # allow anonymous GET operations when auth is used
          AUTH_ANONYMOUS_GET: false
          # sets the base context path
          CONTEXT_PATH:
          # parallel scan limit for the repo indexer
          INDEX_LIMIT: 0          
        secret:
          # username for basic http authentication
          BASIC_AUTH_USER: ${CHARTMUSEUM_USER}
          # password for basic http authentication
          BASIC_AUTH_PASS: ${CHARTMUSEUM_PASSWORD}         
        
      ## Use an alternate scheduler, e.g. "stork".
      ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
      ##
      # schedulerName:

      deployment:
        ## Chartmuseum Deployment annotations
        annotations: {}
        #   name: value
        labels: {}
        #   name: value

      ## Pod annotations
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
      ## Read more about kube2iam to provide access to s3 https://github.com/jtblin/kube2iam
      ##
      podAnnotations: {}
        # iam.amazonaws.com/role: role-arn

      service:
        servicename:
        type: ClusterIP
        externalTrafficPolicy: Local
        ## Uses pre-assigned IP address from cloud provider
        ## Only valid if service.type: LoadBalancer
        loadBalancerIP:
        ## Limits which cidr blocks can connect to service's load balancer
        ## Only valid if service.type: LoadBalancer
        loadBalancerSourceRanges: []
        # clusterIP: None
        externalPort: 8080
        nodePort:
        annotations: {}
        labels: {}

      serviceMonitor:
        enabled: true
        # namespace: prometheus
        labels: {}
        metricsPath: "/metrics"
        # timeout: 60
        # interval: 60

      resources: {}
      #  limits:
      #    cpu: 100m
      #    memory: 128Mi
      #  requests:
      #    cpu: 80m
      #    memory: 64Mi

      probes:
        liveness:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readiness:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3

      serviceAccount:
        create: false
        name: ""
        automountServiceAccountToken: false
        ## Annotations for the Service Account
        annotations: {}

      # UID/GID 1000 is the default user "chartmuseum" used in
      # the container image starting in v0.8.0 and above. This
      # is required for local persistent storage. If your cluster
      # does not allow this, try setting securityContext: {}
      securityContext:
        enabled: true
        fsGroup: 1000
        ## Optionally, specify supplementalGroups and/or
        ## runAsNonRoot for security purposes
        # runAsNonRoot: true
        # supplementalGroups: [1000]

      containerSecurityContext: {}

      priorityClassName: ""

      nodeSelector: {}

      tolerations: []

      affinity: {}

      persistence:
        enabled: true
        accessMode: ReadWriteOnce
        size: 8Gi
        labels: {}
          # name: value
        path: /storage
        ## A manually managed Persistent Volume and Claim
        ## Requires persistence.enabled: true
        ## If defined, PVC must be created manually before volume will be bound
        # existingClaim:

        ## Chartmuseum data Persistent Volume Storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        storageClass: "nfs-client"        

      ## Init containers parameters:
      ## volumePermissions: Change the owner of the persistent volume mountpoint to RunAsUser:fsGroup
      ##
      volumePermissions:
        image:
          registry: docker.io
          repository: bitnami/minideb
          tag: buster
          pullPolicy: Always
          ## Optionally specify an array of imagePullSecrets.
          ## Secrets must be manually created in the namespace.
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
          ##
          # pullSecrets:
          #   - myRegistryKeySecretName

      ## Ingress for load balancer
      ingress:
        enabled: true
        ## Chartmuseum Ingress labels
        ##
        labels: {}
          # dns: "route53"

        ## Chartmuseum Ingress annotations
        ##
        annotations: 
          external-dns.alpha.kubernetes.io/hostname: "chartmuseum.${SECRET_DOMAIN_2}"
          external-dns.alpha.kubernetes.io/ttl: "120"
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN_2}"
          # kubernetes.io/ingress.class: nginx
          # kubernetes.io/tls-acme: "true"

        ## Chartmuseum Ingress hostnames
        ## Must be provided if Ingress is enabled
        ##
        hosts: 
          - name: chartmuseum.${SECRET_DOMAIN_2}
          #   path: /
          #   tls: false
          # - name: chartmuseum.domain2.com
          #   path: /
          #
          #   ## Set this to true in order to enable TLS on the ingress record
            tls: true
          #
          #   ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
          #   ## Secrets must be added manually to the namespace
          #   tlsSecret: chartmuseum.domain2-tls

        # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
        # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
        ingressClassName:

      